// Code generated by mockery v2.46.3. DO NOT EDIT.

package utilmock

import mock "github.com/stretchr/testify/mock"

// ShellExec is an autogenerated mock type for the ShellExec type
type ShellExec struct {
	mock.Mock
}

// ExecCmd provides a mock function with given fields: cmd, args
func (_m *ShellExec) ExecCmd(cmd string, args []string) ([]byte, error) {
	ret := _m.Called(cmd, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecCmd")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]byte, error)); ok {
		return rf(cmd, args)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []byte); ok {
		r0 = rf(cmd, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(cmd, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecCmdWithError provides a mock function with given fields: cmd, args
func (_m *ShellExec) ExecCmdWithError(cmd string, args []string) ([]byte, []byte, error) {
	ret := _m.Called(cmd, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecCmdWithError")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]byte, []byte, error)); ok {
		return rf(cmd, args)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []byte); ok {
		r0 = rf(cmd, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) []byte); ok {
		r1 = rf(cmd, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(string, []string) error); ok {
		r2 = rf(cmd, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewShellExec creates a new instance of ShellExec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShellExec(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShellExec {
	mock := &ShellExec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
